metavar termvar, x ::=

metavar i, l ::=

grammar

typ, A {{ tex A }}, B {{ tex B }}, C {{ tex C }}, D {{ tex D }}, E {{ tex E }}, O {{ tex O }} :: 't_' ::=
    | Int         :: :: Int
    | Bool        :: :: Bool {{ com only for demo }}
    | String      :: :: String {{ com only for demo }}
    | Top         :: :: Top
    | A -> B      :: :: Arrow
    | A & B       :: :: And
    | { l : A }   :: :: Record
    | ( A )       :: :: Paren

exp, e {{ tex e }}, v {{ tex v }}, p {{ tex p}}, u {{ tex u }}, One {{ tex 1 }} :: 'e_' ::=
    | x                       :: :: Var
    | i                       :: :: Lit
    | \ x : A . e : B         :: :: Lam {{ tex [[\]][[x]].\,[[e]][[:]][[A]] \rightarrow [[B]] }}
    | \\ x : A . e            :: :: LLam {{ tex [[\]] [[x]][[:]][[A]].\, [[e]] }}
    | e1 e2                   :: :: App
    | e1 ,, e2                :: :: Merge
    | e : A                   :: :: Anno
    | { l = e }               :: :: Record
    | e . l                   :: :: Proj
    | e1 [ x ~> e2 ]          :: M :: Subst
    | ( e )                   :: :: Paren

ctx, T {{ tex \Gamma }} :: 'ctx_' ::=
    | []                   :: :: Empty {{ tex \cdot }}
    | T , x : A            :: :: Cons

arg, S {{ tex S }} :: 'arg_' ::=
    | []                  :: :: None {{ tex \cdot }}
    | A                   :: :: Type
    | l                   :: :: Label

dir {{ tex : }} :: 'dir_' ::=
    | =>                  :: :: Inf {{ tex \Rightarrow }}
    | <=                  :: :: Chk {{ tex \Leftarrow }}

vl {{ tex vl }} :: 'vl_' ::=
    | v                   :: :: Value
    | l                   :: :: Label

ot {{ tex \, \rightsquigarrow option \, [[B]] }} :: 'ot_' ::=
    | ~> []                  :: :: None {{ tex }}
    | ~> A                   :: :: Type {{ tex \colorbox{lightgray}{$ \rightsquigarrow [[A]] $} }}

par, P {{ tex P }} :: 'partyp_' ::=
    | S                   :: :: Arg
    | PV S                :: :: ASB {{ tex [[S]] _{\rightarrow} }}
    | PT S                :: :: AS  {{ tex [[S]] _{\rightarrow?} }}


terminals :: 'terminals_' ::=
    | Top         ::  :: Top        {{ tex \mathsf{Top}  }}
    | Int         ::  :: Int        {{ tex \mathsf{Int}  }}
    | Bool        ::  :: Bool       {{ tex \mathsf{Bool} }}
    | String      ::  :: String     {{ tex \mathsf{String} }}
    | ->          ::  :: Arrow      {{ tex \rightarrow }}
    | &           ::  :: And        {{ tex \, \& \, }}
    | ,,          ::  :: Merge      {{ tex \,,,\, }}
    | \           ::  :: Lam        {{ tex \lambda }}
    | ~>          ::  :: subst      {{ tex \mapsto }}


formula :: 'formula_' ::=
  | judgement                 ::   :: judgement
  | not formula               :: M :: not {{ tex \neg [[formula]] }}
  | l1 <> l2                  ::   :: labelneq {{ tex [[l1]] \neq [[l2]] }}
  | ptype(u1) * ptype(u2)     ::   :: ptypefunc {{ tex ptype ( u_1 ) * ptype ( u_2 ) }}
  | ptype(v1) <: PT atype(vl) ::   :: runtimejudge1 {{ tex ptype ( v_1 ) <: atype ( vl ) _{\rightarrow} \mapsto }}
  | ptype(v2) <: PT atype(vl) ::   :: runtimejudge2 {{ tex ptype ( v_2 ) <: atype ( vl ) _{\rightarrow} \mapsto }}
  | pvalue e                  ::   :: pvaluecon     {{ tex pvalue ~ [[e]]}}
  | x : A in T                ::   :: incontext     {{ tex x : A ~in~ T }}


defns
TopLikeType :: '' ::=

defn
TopLike A :: :: TopLike :: Tl_ {{ com Toplike Types}} {{ tex \rceil [[A]] \lceil }}
by

---------------- :: Top
TopLike Top


TopLike A
TopLike B
--------------------- :: And
TopLike A & B


TopLike B
---------------------- :: Arr
TopLike A -> B


TopLike A
--------------------- :: Rcd
TopLike { l : A }


defns
SplitType :: '' ::=

defn
Split A A1 A2 :: :: Split :: Sp_ {{ com Splittable Types }} {{ tex [[A1]] \hookleftarrow [[A]] \hookrightarrow [[A2]] }}
by

-------------------------- :: And
Split A & B A B


Split B B1 B2
---------------------------------- :: Arr
Split A -> B A -> B1 A -> B2


Split A A1 A2
-------------------------------------- :: Rcd
Split { l : A } { l : A1 } { l : A2 }


defns
OrdinaryType :: '' ::=

defn
Ordinary A :: :: Ordinary :: Ord_ {{ com Ordinary Types }} {{ tex [[A]]~ \mathsf{Ordinary} }}
by

--------------------------- :: Top
Ordinary Top


-------------------------- :: Int
Ordinary Int


Ordinary B
-------------------------- :: Arr
Ordinary A -> B


Ordinary A
--------------------------- :: Rcd
Ordinary { l : A }


defns
Subtyping :: '' ::=

defn
A <: B :: :: Sub :: Sub_ {{ com Subtyping }} {{ tex [[A]] [[<:]] [[B]] }}
by


---------------------- :: Int
Int <: Int


Ordinary B
TopLike B
---------------------- :: Top
A <: B


Ordinary D
C <: A
B <: D
---------------------- :: Arr
A -> B <: C -> D


Ordinary B
A <: B
------------------------ :: Rcd
{ l : A } <: { l : B }


Split B B1 B2
A <: B1
A <: B2
------------------------ :: And
A <: B


Ordinary C
A <: C
------------------------ :: And_L
A & B <: C


Ordinary C
B <: C
----------------------- :: And_R
A & B <: C

defns
IsoSub :: '' ::=

defn
A << B :: :: ISub :: ISub_ {{ com Isomorphic Subtyping }} {{ tex [[A]]\approx[[B]] }}
by

------------------ :: Refl
A << A


A << B
----------------------- :: Rcd
{ l : A } << { l : B }


Split B B1 B2
A1 << B1
A2 << B2
----------------------- :: And
A1 & A2 << B

defns
AppSub :: '' ::=

defn
S |- A :: :: AppSubBinary:: Aas_ {{ com Applicative Subtyping (Binary) }} {{ tex [[S]]\vdash[[A]]}}
by

----------------------- :: Refl
[] |- A


C <: A
---------------------- :: Arr
C |- A -> B


--------------------- :: Lbl
l |- { l : A }


C |- A
----------------------- :: And_L
C |- A & B


C |- B
---------------------- :: And_R
C |- A & B

defn
S |- A <: B :: :: AppSub :: Ass_ {{ com Applicative Subtyping }} {{ tex [[S]] \vdash [[A]] [[<:]] [[B]]}}
by

------------------------ :: Refl
[] |- A <: A


C <: A
------------------------ :: Arr
C |- A -> B <: B


------------------------ :: Lbl
l |- { l : A } <: A


S |- A <: D
not S |- B
------------------------ :: And_L
S |- A & B <: D


S |- B <: D
not S |- A
------------------------ :: And_R
S |- A & B <: D


S |- A <: D1
S |- B <: D2
------------------------ :: And_P
S |- A & B <: D1 & D2


defns
Disjoint :: '' ::=

defn A * B :: :: Disjoint :: 'Dj_'
by

--------------- :: Top_L
Top * A


------------------ :: Top_R
A * Top

---------------------- :: Int_Arr
Int * A -> B


---------------------- :: Arr_Int
A -> B * Int


B * D
---------------------- :: Arr_Arr
A -> B * C -> D


A * B
------------------------ :: Rcd_Eq
{ l : A } * { l : B }


l1 <> l2
------------------------- :: Rcd_Neq
{ l1 : A } * { l2 : B }


---------------------- :: Int_Rcd
Int * { l : A }


---------------------- :: Rcd_Int
{ l : A } * Int


---------------------- :: Arr_Rcd
A -> B * { l : C }


---------------------- :: Rcd_Arr
{ l : A } * B -> C


A * C
B * C
--------------- :: And_L
A & B * C


A * B
A * C
--------------- :: And_R
A * B & C


defns
UnifiedSubtyping :: '' ::=

defn
A <: P ot :: :: Usub :: S_ {{ com Applicative Subtyping }}  {{ tex [[A]] \leq [[P]] [[ot]] }}
by


-------------------------- :: Int
Int <: Int ~> []


Ordinary B
TopLike B
---------------------- :: Top
A <: B ~> []


B <: A ~> []
C <: D ~> []
Ordinary D
-------------------------- :: Arr
A -> C <: B -> D ~> []


Ordinary B
A <: B ~> []
----------------------------- :: Rcd
{ l : A } <: { l : B } ~> []


Split B B1 B2
A <: B1 ~> []
A <: B2 ~> []
--------------------------- :: And
A <: B ~> []


Ordinary C
A <: C ~> []
------------------------- :: And_L
A & B <: C ~> []


Ordinary C
B <: C ~> []
-------------------------- :: And_R
A & B <: C ~> []


B <: A1 ~> []
------------------------------- :: V_Arr
A1 -> A2 <: PV B ~> []


------------------------------ :: V_Lbl
{ l : A } <: PV l ~> []


A1 <: PV S ~> []
---------------------- :: V_And_L
A1 & A2 <: PV S ~> []


A2 <: PV S ~> []
----------------------- :: V_And_R
A1 & A2 <: PV S ~> []


B <: A1 ~> []
------------------------ :: As_Arr
A1 -> A2 <: PT B ~> A2


--------------------------- :: As_Lbl
{ l : A } <: PT l ~> A


A1 <: PT S ~> C
not A2 <: PV S ~> []
---------------------------- :: As_And_L
A1 & A2 <: PT S ~> C


A2 <: PT S ~> C
not A1 <: PV S ~> []
---------------------------- :: As_And_R
A1 & A2 <: PT S ~> C


A1 <: PT S ~> C1
A2 <: PT S ~> C2
---------------------------- :: As_And_P
A1 & A2 <: PT S ~> C1 & C2



defns
PrincipalTyping :: '' ::=

defn
Ptype e A :: :: Ptype :: Pt_ {{ tex \mathsf{Ptype}~[[e]]~[[A]] }}
by

------------------------ :: Int
Ptype i Int


---------------------------------------- :: Arr
Ptype \x : A . e : B  A -> B


--------------------------------- :: Ann
Ptype e : A  A


Ptype e1 A
Ptype e2 B
---------------------------------- :: Mrg
Ptype e1 ,, e2 A & B


defns
ArgumentalTyping :: '' ::=

defn
Atype e S :: :: Atype :: At_ {{ tex \mathsf{Atype}~[[e]]~[[S]] }}
by

---------------------- :: Ann
Atype e : A A


Atype e A
--------------------------- :: Rcd
Atype { l = e } { l : A }


Atype e1 A
Atype e2 B
---------------------- :: Mrg
Atype e1 ,, e2 A & B


---------------------- :: Lbl
Atype l l

defns
Consistent :: '' ::=

defn
u1 ~~ u2 :: :: Consistent :: 'Con_' {{ tex [[u1]] \approx\approx [[u2]] }}
by

---------------------------------------- :: Lam
(\ x : A . e : B1) : C ~~ (\ x : A . e : B2) : D


-------------------------- :: Ann
e : A ~~ e : B


u1 ~~ u2
-------------------------- :: Rcd
{ l = u1 } ~~ { l = u2 }


ptype(u1) * ptype(u2)
-------------------------- :: Disj
u1 ~~ u2


u1 ~~ u
u2 ~~ u
------------------------- :: Mrg_L
u1 ,, u2 ~~ u


u ~~ u1
u ~~ u2
------------------------- :: Mrg_R
u ~~ u1 ,, u2

defns
Casting :: '' ::=

defn
v -> A v' :: :: Casting :: Ct_ {{ com Casting }} {{ tex [[v]] \, \longmapsto _{[[A]]} \, [[v']] }}
by

A <: Int
------------------------ :: Refl
i : A -> Int i : Int


Ordinary A
TopLike A
------------------------------------------- :: Top
v  ->A One : A


Ordinary D
not TopLike D
E <: C -> D
------------------------------------------------------------------ :: Arr
(\ x : A . e : B) : E  ->(C -> D)  (\ x : A . e : D) : (C -> D)


Ordinary A
not TopLike A
v -> A v'
----------------------------------- :: Rcd
{ l = v } ->{ l : A } { l = v' }


Ordinary A
v1 ->A  v1'
--------------------------------- :: Mrg_L
v1 ,, v2 ->A  v1'


Ordinary A
v2 ->A  v2'
--------------------------------- :: Mrg_R
v1 ,, v2 ->A  v2'


Split A A1 A2
v ->A1 v1
v ->A2 v2
--------------------------------------- :: And
v ->A v1 ,, v2


defns
ParallelApplication :: '' ::=

defn
v ; vl --> e :: :: Papp :: Oa_ {{ com Overloaded Application }} {{ tex ([[v]]~[[vl]])~ \rightrightarrows ~[[e]] }}
by

TopLike B
----------------------------------- :: Int_TL
(i : A -> B) ; v --> One : B


TopLike A
----------------------------------- :: Int_TL_R
i : {l : A} ; v --> One : A


TopLike D
------------------------------------------- :: Arr_TL
(\ x : A . e : B) : C -> D ; v --> One : D


TopLike C
------------------------------------------- :: Arr_TL_R
(\ x : A . e : B) : {l : C} ; v --> One : C



---------------------------------------- :: Proj
{ l = v } ; l --> v


v ->A v'
not TopLike D
--------------------------------------------------- :: Lam
(\ x : A .  e : B) : C -> D ; v --> e [ x ~> v' ] : D



not ptype(v2) <: PT atype(vl)
v1 ; vl --> e
------------------------------- :: Mrg_L
v1 ,, v2 ; vl --> e

not ptype(v1) <: PT atype(vl)
v2 ; vl --> e
------------------------------- :: Mrg_R
v1 ,, v2 ; vl --> e


ptype(v1) <: PT atype(vl)
ptype(v2) <: PT atype(vl)
v1 ; vl --> e1
v2 ; vl --> e2
------------------------------- :: Mrg_P
v1 ,, v2 ; vl --> e1 ,, e2


defns
Reduction :: '' ::=

defn
e -->  e'  :: :: Step :: Step_ {{ com Small-Step Reduction }} {{ tex [[e]]~\longmapsto~[[e']] }}
by

---------------------- :: Int_Ann
i --> i : Int


------------------------------------------------ :: Arr_Ann
\ x : A . e : B --> ( \ x : A . e : B ) : A -> B


Split A A1 A2
--------------------------------------- :: Pv_Split
p : A --> p : A1 ,, p : A2


v1 ; v2 --> e
----------------------  :: Papp
v1 v2 --> e


v ; l --> v'
-------------------------------------- :: Pproj
v.l --> v'


v ->A v'
------------------------------------------ :: Val_Ann
v : A --> v'


e1 --> e1'
------------------------------------- :: App_L
e1 e2 --> e1' e2


e2 --> e2'
------------------------------------- :: App_R
v1 e2 --> v1 e2'


e1 --> e1'
e2 --> e2'
------------------------------------------ :: Mrg_Parallel
e1 ,, e2 --> e1' ,, e2'


e1 --> e1'
------------------------------------------ :: Mrg_L
e1 ,, v2 --> e1' ,, v2


e2 --> e2'
------------------------------------------ :: Mrg_R
v1 ,, e2 --> v1 ,, e2'


not pvalue e
e --> e'
------------------------------------------ :: Ann
e : A --> e' : A


e --> e'
-------------------------------------- :: Rcd
{ l = e } --> { l = e' }


e --> e'
-------------------------------------- :: Prj
e.l --> e'.l

defns
Typing :: '' ::=

defn
T |- e dir A :: :: Typing :: 'T_' {{ com Bidirectional Typing }} {{ tex [[T]] \vdash [[e]] [[dir]] [[A]] }}
by


----------------- :: Lit
T |- i => Int


x : A in T
-------------------------- :: Var
T |- x => A


T , x : A |- e <= B
------------------------------------------- :: Lam
T |- \x : A . e : B => A -> B


T |- e => A
--------------------------- :: Rcd
T |- { l = e } => { l : A }


T |- e1 => A
T |- e2 => B
B |- A <: C
----------------------- :: App
T |- e1 e2 => C


T |- e => A
l |- A <: B
----------------------- :: Proj
T |- e.l => B


T |- e1 => A
T |- e2 => B
A * B
------------------------------ :: Mrg
T |- e1 ,, e2 => A & B


[] |- u1 => A
[] |- u2 => B
u1 ~~ u2
------------------------------ :: Mrg_Val
T |- u1 ,, u2 => A & B


T |- e <= A
--------------------- :: Ann
T |- e : A => A


T |- e => A
A <: B
--------------------- :: Sub
T |- e <= B


defns
STLCTyping :: '' ::=

defn
T |- e : A :: :: STLCTyping :: 'Ty_' {{ com STLC Typing }} {{ tex [[T]] \vdash [[e]] : [[A]] }}
by

-------------- :: Lit
T |- i : Int

x : A in T
------------- :: Var
T |- x : A

T , x : A |- e : B
------------------------------------------- :: Lam
T |- \\x : A. e  : A -> B

T |- e1 : A -> B
T |- e2 : A
---------------------------------------- :: App
T |- e1 e2 : B

defns
STLCSemantics :: '' ::=

defn
e -STLC-> e' :: :: STLCSemantics :: 'E_' {{ com STLC Semantics }} {{ tex [[e]]~\longmapsto~[[e']] }}
by

--------------------------------------------------------- :: Beta
(\\ x : A .  e) v -STLC-> e [ x ~> v ]

e1 -STLC-> e1'
------------------------------------- :: App_L
e1 e2 -STLC-> e1' e2


e2 -STLC-> e2'
------------------------------------- :: App_R
v1 e2 -STLC-> v1 e2'