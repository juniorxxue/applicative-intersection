A simple calculus with Intersection Types and the merge operator.
Similar to the calculus presented in the ICFP 2016 paper.

===============
Relevant papers
===============

Disjoint Intersection Types (ICFP 2016)
Let Arguments go First (ESOP 2018)
A Type-Directed Operational Semantics for a Calculus with a Merge Operator (ECOOP 2020)

======
Syntax
======

A, B ::= Int | Top | A -> B | A & B
e ::= n | x | \x . e | e1 e2 | e1,,e2 | (e : A)
T ::= . | T, x : A
S ::= . | S, A

We assume a well-formedness relation for contexts (|- T),
which is defined in the standard way.

=========
Subtyping
=========

------
A <: B     (Subtyping, rule form)
------


Int <: Int         S-Int

A <: Top           S-Top

C <: A    B <: D
----------------   S-Arrow
A -> B <: C -> D

A <: B    A <: C
----------------   S-And
A <: B & C

A <: C
----------         S-AndL
A & B <: C

B <: C
----------         S-AndR
A & B <: C

=====================
Application Subtyping
=====================

-----------
S |- A <: B
-----------

The meaning of the judgement is:
Under arguments S a "function" of type A has the output type B 

. |- A <: A    AS-Refl

C <: A      S |- B <: D
------------------------ AS-Fun
S, C |- A -> B <: C -> D

S |- A <: D
------------------------ AS-AndL
S |- A & B <: D

S |- B <: D
------------------------ AS-AndR
S |- A & B <: D

Some examples to justify the rules, and some issues. Assume:

succ : Int -> Int
not : Bool -> Bool
The type of (succ ,, not) is (Int -> Int) & (Bool -> Bool)

1) (succ ,, not) 3 

Here we want to automatically pick succ and apply it to 3.
I think this would lead to the following application subtyping statement:

Int |- (Int -> Int) & (Bool -> Bool) <: Int

For this example, the rules above (in particular AS-AndL and AS-AndR)
should work. The full derivation, using the rules above is as follows:

               --------------- AS-Refl
Int <: Int     . |- Int <: Int
------------------------------ AS-Fun
Int |- (Int -> Int) <: Int
------------------------------------------- AS-AndL
Int |- (Int -> Int) & (Bool -> Bool) <: Int

However, how about the following program:
          
(succ ,, f : Int -> Bool) 3 

The type of (succ ,, f : Int -> Bool) is (Int -> Int)&(Int -> Bool)
In this program the merge is disjoint, but there is ambiguity
because the argument type of either function matches
the input type. Without any further annotations I think
this program should be rejected on ambiguity grounds.
See the discussion on ambiguity below.

2) (\f . f 1 : (Int -> Int) -> Int) (succ,,not)

Here we should pick succ from the merge. I think that,
for this case, we would like the following to hold for
    our application subtyping judgement: 

(Int -> Int) & (Bool -> Bool) |- (Int -> Int) -> Int <: Int 

As Ningning pointed out the rules above seem to be sufficient to
deal with this case too.

=========
Ambiguity
=========

Regarding the ambiguity issue, I think Ningning's suggestion (without
using distributivity) is worthwhile trying first. Thus we should
replace the rules AS-AndL and AS-AndR by the following 2 rules:

S, C |- A <: D      not (S, C |- B <: E)
---------------------------------------- AS-AndL2
S, C |- A & B <: D

S, C |- B <: D     not (S, C |- A <: E)
----------------------------------------- AS-AndR2
S, C |- A & B <: D

When the 2nd conditions are broken, a programming language using
those rules should report an ambiguity error.

Later on we may also try to extend the system with distributivity,
which should also work, but required more changes to the system.
I'll leave Ningning's notes on distributity next:

Or we can actually have distributivity on applicative subtyping:

S, C |- A <: D     S, C |- B <: E
---------------------------- AS-And
S, C |- A & B <: D & E

In this case

Int |- Int -> Int <: Int     Int |- Int -> Bool <: Bool
------------------------------------------------------ AS-And
Int |- (Int -> Int) & (Int -> Bool) <: Int & Bool

It coincides with the distributivity of plain subtyping.

(Int -> Int) & (Int -> Bool) <: Int -> (Int & Bool)     Int |- Int -> (Int & Bool) <: Int & Bool
--------------------------------------------------------------------------
Int |- (Int -> Int) & (Int -> Bool) <: Int & Bool


Also works well with AS-AndL as

S, C |- A <: D   S, C |- B <: E
-------------------------------- AS-And     ------------ S-AndL
S, C |- A & B <: D & E                       D & E <: D
-------------------------------------------------------------
S, C |- A & B <: D

======
Typing
======

The main novelty is on typing: instead of the bi-directional
type-system used in the ICFP 2016 paper, we use a let
arguments go first approach.
However I think we must employ a let-arguments go first
approach together with a checking mode. The reason is that,
for the purposes of defining the type-directed operational
semantics, we need the typing information for the output
of functions. If we just have lambdas with annotations
on the arguments (\x : A. e) we do not have the information
of the outputs available. Thus, we have problems when we encounter
programs such as:

(\(f : Int -> Int). f 1) ((\x : Int . x + 1) ,, (\x : Int. False))

In the program above, when doing reduction, we should be able to
extract (\x : Int . x + 1) from the first component of the merge,
and use it to replace f in the body. But without the output
type, we can't do this.
Snow's ECOOP 2020 describes this issue. 
Thus, we use (\x . e : A -> B) to have the whole information
about the type of the function.
There are two typing judgements:

--------------
T; S |- e => A

and

T |- e <= A
--------------

when S is empty, we abreviate the judgement to T |- e => A.
In other words, we have the following syntactic sugar:
T |- e => A   ==   T; . |- e => A

The rules for the typing judgement are: 

|- T
------------ TInt
T |- n => Int

|- T   x : A \in T
--------------------- TVar
T |- x => A

T, x : A |- e <= B
----------------------------- TLam1
T |- \x. e <= A -> B

T, x : A ; S |- e => B
------------------------------ TLam2
T ; S, A |- \x. e => A -> B

S |- A <: B    T |- e <= A
----------------------------- TAnn
T ; S |- e : A => B

T |- e2 => A   T ; S, A |- e1 => A -> B
----------------------------------------- TApp1
T ; S |- e1 e2 => B

T |- e2 => A    T |- e1 <= A -> B
----------------------------------- TApp2
T |- e1 e2 <= B

T |- e => B     B <: A
------------------------- TSub
T |- e <= A

T |- e1 => A   T |- e2 => B
----------------------------- TMerge
T |- e1 ,, e2 => A & B

Note overlapping between TSub and TApp2?

I guess one option would be to drop TApp2. What kind of programs
would be rejected if TApp2 is dropped?

I guess it would be something like:

(succ ,, f : Int -> Bool) 3 : Bool

The idea would be for TApp2 to exploit the output type to remove
the ambiguity. Now we can check the merge against:

(succ,, f : Int -> Bool) <= Int -> Bool

So it seems that T-App2 would be useful in such cases. Thus dropping
T-App2 would be undesirable.

Another observation is that there is a checking rule for lambdas
and another checking rule for applications. So, the TSub
rule only needs to deal with the remaining constructs. We could
potentially create a syntactic distinction, to eliminate the
overalapping.

NINGNING: On the other hand I feel this overlapping might be fine.
That is, we can have multiple derivations for one expression but it
does not hurt coherence or anything. In particular, the overlapping
happens in the checking mode, which means no matter which rule we
apply, the final type would be the same (the type which you check the
expression against). Not sure if that's true; we may want to prove that.


Lemmas to be proved next:

Regularity of typing: If T |- e : A then T |- A and |- T    

Weakening of typing: If T1,T2 |- e : A then T1,x:A,T2 |- e : A 

These lemmas should be in Ningning's previous formalization. They
probably have a slightly different form due to bi-directional type-checking.
Better ask Ningning for more details on those.
